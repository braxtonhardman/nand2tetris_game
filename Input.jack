class Input {

    field String player1Name, player2Name; 
    field String powerX, powerY; 
    field int powerXInt, powerYInt; 

    // Constructor copies the player names 
    constructor Input new(String p1name, String p2name) { 
        var int i;
        var char c; 
    
        // Determine which way the player should be facing 
        // Player1 always face right, Player2 faces left. 
        let player1Name = String.new(25);
        let player2Name = String.new(25);

        // Copies the name from playerName into the String name
        let i = 0;
        while (i < p1name.length()) {
            let c = p1name.charAt(i);
            do player1Name.appendChar(c);
            let i = i + 1;
        }

        let i = 0; 
        while (i < p2name.length()) {
            let c = p2name.charAt(i);
            do player2Name.appendChar(c);
            let i = i + 1;
        }
        return this;
    }

    // Prompts and gets the power x 
    method boolean powerXInput() { 
        var boolean running; 
        var int temp; 
        var char key; 

        let running = true; 

        // Move down 1 line 
        do Output.println();

        // Print the powerx prompt 
        do Output.printString(createPowerXPrompt()); 

        // First input for the angle 
        while(running) { 
            let key = Keyboard.readChar(); 
            // This is the code for the enter key so break out of this loop
            if(key = 128) { 
                // convert string to integer value for comparison 
                let temp = powerX.intValue(); 

                // Check to see if the power is between 0 and 100 
                if((temp > 0) & (temp < 50)) { 
                    // store powerx int 
                    let powerXInt = temp; 
                    let running = false; 
                    return true; 
                } else {  
                    // Print out error message not valid input 
                    do Output.println(); 
                    do Output.printString(createInvalidInput());

                    // Delete the old string 
                    do powerX.dispose(); 

                    // Create a new string
                    let powerX = String.new(5); 

                    // return false given not valid input 
                    return false;
                }
            } else { 
                
                // if a key is pressed append it to powerx 
                if( ~(key = 0))  { 
                    do powerX.appendChar(key);
                }
            }
        }
        return false;
    }

    // Prompt and get the power y input
    method boolean powerYInput() {
        var boolean running; 
        var int temp; 
        var char key; 

        let running = true;

        // Move down one line 
        do Output.println(); 

        // Print out the power prompt
        do Output.printString(createPowerYPrompt());

        while(running) { 
            let key = Keyboard.readChar(); 

            // This is the code for the enter key so break out of this loop
            if(key = 128) { 

                // Convert the string to an int 
                let temp = powerY.intValue();

                // Check to see if the power is between 0 and 100 
                if((temp > 0) & (temp < 100)) { 
                    //. store powery int 
                    let powerYInt = temp; 
                    let running = false; 
                    return true; 
                } else {  
                    // Print out error message not valid input 
                    do Output.println(); 
                    do Output.printString(createInvalidInput());

                    // Destroy the old string 
                    do powerY.dispose(); 
                    // Create a new string 
                    let powerY = String.new(5); 

                    // return false if not valid input 
                    return false; 
                }
                
            } else { 
                
                if( ~(key = 0))  {
                    do powerY.appendChar(key);
                    
                }
            }
        }

        return false; 
    }


    // Gets the input powerx and powery for how hard to throw the bomb 
    method void runTurn(String currentPlayer) { 
        var boolean valid; 
        var int temp; 
        var char key; 
        let valid = false; 
        // Create a new string 
        let powerX = String.new(10);
        let powerY = String.new(10);
       
        // Reset the cursor 
        do Output.moveCursor(0, 0);
        do Output.printString(currentPlayer); 

        // Get powerX if valid input (keeps calling powerX if not valid)
        while( ~(valid)) { 
            let valid = powerXInput(); 
            do Output.println(); 
        }
        
        // reset boolean to use for powery
        let valid = false; 

        // Get powerY if valid input (keeps calling powerY if not valid)
        while( ~(valid)) { 
            let valid = powerYInput(); 
            do Output.println(); 
        }
        
        // Clear the screen for the animation 
        do Screen.clearScreen(); 

        return; 
    }

    // Creates the string enter powerY (0 to 100)
    method String createPowerYPrompt() { 
        var String powerPrompt; 
        let powerPrompt = String.new(26);
        do powerPrompt.appendChar(69);   // 'E'
        do powerPrompt.appendChar(110);  // 'n'
        do powerPrompt.appendChar(116);  // 't'
        do powerPrompt.appendChar(101);  // 'e'
        do powerPrompt.appendChar(114);  // 'r'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(112);  // 'p'
        do powerPrompt.appendChar(111);  // 'o'
        do powerPrompt.appendChar(119);  // 'w'
        do powerPrompt.appendChar(101);  // 'e'
        do powerPrompt.appendChar(114);  // 'r'
        do powerPrompt.appendChar(89);   // 'Y'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(40);   // '('
        do powerPrompt.appendChar(48);   // '0'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(116);  // 't'
        do powerPrompt.appendChar(111);  // 'o'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(49);   // '1'
        do powerPrompt.appendChar(48);   // '0'
        do powerPrompt.appendChar(48);   // '0'
        do powerPrompt.appendChar(41);   // ')'
        do powerPrompt.appendChar(58);   // ':'
        do powerPrompt.appendChar(32);   // ' '
        return powerPrompt; 
    }

    // Creates the string enter powerX (0 to 50)
    method String createPowerXPrompt() { 
        var String powerPrompt; 
        let powerPrompt = String.new(25);
        do powerPrompt.appendChar(69);   // 'E'
        do powerPrompt.appendChar(110);  // 'n'
        do powerPrompt.appendChar(116);  // 't'
        do powerPrompt.appendChar(101);  // 'e'
        do powerPrompt.appendChar(114);  // 'r'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(112);  // 'p'
        do powerPrompt.appendChar(111);  // 'o'
        do powerPrompt.appendChar(119);  // 'w'
        do powerPrompt.appendChar(101);  // 'e'
        do powerPrompt.appendChar(114);  // 'r'
        do powerPrompt.appendChar(88);   // 'X'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(40);   // '('
        do powerPrompt.appendChar(48);   // '0'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(116);  // 't'
        do powerPrompt.appendChar(111);  // 'o'
        do powerPrompt.appendChar(32);   // ' '
        do powerPrompt.appendChar(53);   // '5'
        do powerPrompt.appendChar(48);   // '0'
        do powerPrompt.appendChar(41);   // ')'
        do powerPrompt.appendChar(58);   // ':'
        do powerPrompt.appendChar(32);   // ' '
        return powerPrompt; 
    }

    // Creates string Error: Invalid input 
    method String createInvalidInput() { 
        var String errorMsg;

        let errorMsg = String.new(25);       

        do errorMsg.appendChar(69);          // 'E'
        do errorMsg.appendChar(114);         // 'r'
        do errorMsg.appendChar(114);         // 'r'
        do errorMsg.appendChar(111);         // 'o'
        do errorMsg.appendChar(114);         // 'r'
        do errorMsg.appendChar(58);          // ':'
        do errorMsg.appendChar(32);          // ' '
        do errorMsg.appendChar(73);          // 'I'
        do errorMsg.appendChar(110);         // 'n'
        do errorMsg.appendChar(118);         // 'v'
        do errorMsg.appendChar(97);          // 'a'
        do errorMsg.appendChar(108);         // 'l'
        do errorMsg.appendChar(105);         // 'i'
        do errorMsg.appendChar(100);         // 'd'
        do errorMsg.appendChar(32);          // ' '
        do errorMsg.appendChar(105);         // 'i'
        do errorMsg.appendChar(110);         // 'n'
        do errorMsg.appendChar(112);         // 'p'
        do errorMsg.appendChar(117);         // 'u'
        do errorMsg.appendChar(116);         // 't'
        return errorMsg; 
    }

    //Create the HIT message
    method String hit() {
        //create and initalize da string
        var String hitMsg;
        let hitMsg = String.new(4);  // "HIT!" is 4 characters

        //add characters and return
        do hitMsg.appendChar(72);   // 'H'
        do hitMsg.appendChar(73);   // 'I'
        do hitMsg.appendChar(84);   // 'T'
        do hitMsg.appendChar(33);   // '!'

        return hitMsg;
    }

    method void printWinner(String playerName) //print the player that wins the room
    {
        //Create the message string for our wonderful player1
        var String msg;
        let msg = String.new(15);

        //Print out the name of the player 
        do Output.printString(playerName);

        //Create the message
        do msg.appendChar(32);   // ' '
        do msg.appendChar(119);  // 'w'
        do msg.appendChar(105);  // 'i'
        do msg.appendChar(110);  // 'n'
        do msg.appendChar(115);  // 's'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(116);  // 't'
        do msg.appendChar(104);  // 'h'
        do msg.appendChar(101);  // 'e'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(114);  // 'r'
        do msg.appendChar(111);  // 'o'
        do msg.appendChar(111);  // 'o'
        do msg.appendChar(109);  // 'm'
        do msg.appendChar(33);   // '!'

        do Output.printString(msg);
        do Output.println();
        do msg.dispose(); //release our memory
        do pressAnyKey();
        return;   
    }
    method void pressAnyKey() //halts the screen until we press a key to continue the game
    {
        //create our variables
        var String msg;

        //Create the string
        let msg = String.new(25); 
        do msg.appendChar(80);   // 'P'
        do msg.appendChar(114);  // 'r'
        do msg.appendChar(101);  // 'e'
        do msg.appendChar(115);  // 's'
        do msg.appendChar(115);  // 's'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(97);   // 'a'
        do msg.appendChar(110);  // 'n'
        do msg.appendChar(121);  // 'y'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(107);  // 'k'
        do msg.appendChar(101);  // 'e'
        do msg.appendChar(121);  // 'y'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(116);  // 't'
        do msg.appendChar(111);  // 'o'
        do msg.appendChar(32);   // ' '
        do msg.appendChar(99);   // 'c'
        do msg.appendChar(111);  // 'o'
        do msg.appendChar(110);  // 'n'
        do msg.appendChar(116);  // 't'
        do msg.appendChar(105);  // 'i'
        do msg.appendChar(110);  // 'n'
        do msg.appendChar(117);  // 'u'
        do msg.appendChar(101);  // 'e'

        //print out and dispose the string and wait until a key is pressed
        do Output.printString(msg);
        do msg.dispose();
        do Keyboard.readChar(); //wait until a key is pressed

        return;
    }    

    // Get the powerX as an Int 
    method int getPowerX() { 
        return powerXInt;
    }

    // Get the powerY as an Int 
    method int getPowerY() { 
        return powerYInt; 
    }

    // Dispose of the class when needed 
    method void dispose() { 
        return; 
    }  
} 